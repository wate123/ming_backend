scalar Time

type Invoice {
    invno: String!
    cust_type: String!
    custphone: String!
    invdate: Time!
    invoicedat: String!
    custno: String!
    discount: Int!
    discamount: Float!
    bal_ac: Float!
    balance:Float!
    taxamount: Float!
    subtotal: Float!
    totamount: Float!
    totbev: Float!
    paidm: Int!
    timeset: String!
    otime: String!
    lunch: String!
    server: String!
    table_no: String!
    no_person: String!
    delivery: String!
    mark: String!
    checkprint: String!
    orderprint: Int!
    tip: Float!
    cash_paid : Float!
    change_amt: Float!
    stateno: String!
    finished: String!
    unsend: String!
    service_ch: Float!
    upstatus: Int!
    discrateam: Float!
    nontaxsale: String!
    paidst: String!
    vipno: String!
    discbywho: String!
    custname: String!
    void: Int!
    split: Int!
    deltime: String!
    lineprt: String!
    batch: Int!
    paytime: String!
    onlines: Int!
    cooked: Int!
    mapmark: String!
    note: String!
}

type SalesStats {
    today: Float!
    today_yesterday_diff: Float!
    this_year_today_last_year_today_diff: Float!
    total: Float!
    profit: Float!
}

type SalesOverTime {
    time_point: Int!
    complete_date: Time!
    total_amount: Float!
}

input SalesInput {
    start: Time
    end: Time
    range_by: String
    type: String
}

type Query{
    invoices: [Invoice!]!
    getAllSalesStats: SalesStats!
    getSalesByDate(input: SalesInput!): [SalesOverTime]!
    getSalesFromThisYear(input: String): [SalesOverTime]!
    getSalesFromThisMonth(input: String): [SalesOverTime]!
    getSalesFromThisWeek(input: String): [SalesOverTime]!
}